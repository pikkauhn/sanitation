// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Model definitions

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  roles         String
  sessions      Session[]
  userId        String?
  password      String
  otps          OTP[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User?    @relation(fields: [userId], references: [id])
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Bin {
  id            String       @id @default(uuid())
  location      Location?    @relation(fields: [locationId], references: [id])
  status        String
  lastEmptiedAt DateTime?
  history       BinHistory[]
  BinSize       BinSize?     @relation(fields: [binSizeId], references: [id])
  binSizeId     String?
  customer      Customer?    @relation(fields: [customerId], references: [id])
  customerId    String?
  locationId    String?
}

model BinSize {
  id     String  @id @default(uuid())
  size   String  @unique
  charge Float
  bins   Bin[]
  binId  String?
}

model Location {
  id         String       @id @default(uuid())
  locationId String?
  address    String
  latitude   Float
  longitude  Float
  notes      String?
  bins       Bin[]
  history    BinHistory[]
  customers  Customer[]
}

model Customer {
  id         String       @id @default(uuid())
  location   Location?    @relation(fields: [locationId], references: [id])
  locationId String?
  name       String
  status     Boolean
  bins       Bin[]
  billable   String?
  binhistory BinHistory[]
}

model BinHistory {
  id         String     @id @default(uuid())
  bin        Bin        @relation(fields: [binId], references: [id], onDelete: Cascade)
  binId      String
  charge     Float      @default(0)
  location   Location?  @relation(fields: [locationId], references: [id])
  locationId String?
  customer   Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String?
  startDate  DateTime
  endDate    DateTime?
}

model OTP {
  id                 String   @id @default(uuid())
  user               User     @relation(fields: [userId], references: [id])
  userId             String
  isVerified         Boolean? @default(false)
  code               String   @unique
  expirationDateTime DateTime
}
